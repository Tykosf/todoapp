{"version":3,"sources":["components/TodoInput.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoInput","_ref","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","clearList","items","map","components_TodoItem","key","concat","id","App","_useState","useState","uuid","_useState2","Object","slicedToArray","storage","setStorage","components_TodoInput","e","objectSpread","target","preventDefault","newItem","trim","length","updatedItems","toConsumableArray","components_TodoList","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ba6cef6.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst TodoInput = ({  item, handleChange, handleSubmit, editItem }) => {\r\n\treturn (\r\n\t\t<div className='card card-body my-3'>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<div className='input-group'>\r\n\t\t\t\t\t<div className='input-group-prepend'>\r\n\t\t\t\t\t\t<div className='input-group-text bg-primary text-white'>\r\n\t\t\t\t\t\t\t<i className='fas fa-tasks' />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\tclassName='form-control text-capitalize'\r\n\t\t\t\t\t\tplaceholder='add your task'\r\n\t\t\t\t\t\tvalue={item}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type='submit'\r\n\t\t\t\t\tclassName={editItem ? \r\n\t\t\t\t\t'btn btn-block btn-success mt-3 text-capitalize'\r\n\t\t\t\t\t: 'btn btn-block btn-primary mt-3 text-capitalize'}\r\n\t\t\t\t>\r\n\t\t\t\t{editItem ? 'edit item' : 'add item'}\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default TodoInput","import React from 'react';\r\n\r\nconst TodoItem = ({ title, handleDelete, handleEdit }) => {\r\n\treturn(\r\n\t\t<li className='list-group-item text-capitalize d-flex justify-content-between my-2'>\r\n\t\t\t<h6>{title}</h6>\r\n\t\t\t<div className='todo-icon'>\r\n\t\t\t\t<span className='mx-2 text-success'>\r\n\t\t\t\t\t<i className='fa fa-paint-brush' onClick={handleEdit} />\r\n\t\t\t\t</span>\r\n\t\t\t\t<span className='mx-2 text-danger'>\r\n\t\t\t\t\t<i className='fa fa-trash' onClick={handleDelete} />\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t)\r\n}\r\nexport default TodoItem","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoList = ({ clearList, items, handleDelete, handleEdit }) => {\r\n\treturn (\r\n\t\t<ul className='list-group my-5'>\r\n\t\t\t<h3 className='text-capitalize text-center'>Todo List</h3>\r\n\t\t\t{items.map(item => {\r\n\t\t\t\treturn <TodoItem key={`item-${item.id}`}\r\n\t\t\t\t\ttitle={item.title}\r\n\t\t\t\t\thandleDelete={() => handleDelete(item.id)}\r\n\t\t\t\t\thandleEdit={() => handleEdit(item.id)}\r\n\t\t\t\t\t/> \r\n\t\t\t})}\r\n\t\t\t<button type='button' \r\n\t\t\t\tonClick={clearList} \r\n\t\t\t\tclassName='btn btn-danger btn-block text-capitalize mt-5'>\r\n\t\t\t\tclear list\r\n\t\t\t</button>\r\n\t\t</ul>\r\n\t)\r\n}\r\nexport default TodoList","import React, { useState } from 'react';\r\nimport TodoInput from './components/TodoInput';\r\nimport TodoList from './components/TodoList';\r\nimport uuid from 'uuid';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; \r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [storage, setStorage] = \r\n  useState({ \r\n    items: [],\r\n    id: uuid(),\r\n    item: '',\r\n    editItem: false\r\n  })\r\n\r\n  const handleChange = (e) => {\r\n    setStorage({\r\n      ...storage,\r\n      item: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newItem = {\r\n      id: storage.id,\r\n      title: storage.item\r\n    }\r\n    if (storage.item.trim().length === 0) return; \r\n    const updatedItems = [...storage.items, newItem];\r\n    setStorage({\r\n      ...storage,\r\n      items: updatedItems,\r\n      item: '',\r\n      id: uuid(),\r\n      editItem: false\r\n    })\r\n  };\r\n\r\n  const clearList = () => {\r\n    setStorage({...storage, items: [] });\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    const filteredItems = storage.items.filter(item => item.id !== id)\r\n    setStorage({ items: filteredItems })\r\n  }\r\n\r\n  const handleEdit = (id) => {\r\n    const filteredItems = storage.items.filter(item => item.id !== id);\r\n    const selectedItem = storage.items.find(item => item.id === id);\r\n    setStorage({\r\n      ...storage,\r\n      items: filteredItems,\r\n      item: selectedItem.title,\r\n      editItem: true,\r\n      id: id\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='row'>\r\n        <div className='col-10 mx-auto col-md-8 mt-4'>\r\n          <h3 className='text-capitalize text-center'>Todo input</h3>\r\n          <TodoInput \r\n            item={storage.item} \r\n            handleChange={handleChange} \r\n            handleSubmit={handleSubmit} \r\n            editItem={storage.editItem}\r\n          />\r\n          <TodoList \r\n            items={storage.items} \r\n            clearList={clearList} \r\n            handleDelete ={handleDelete}\r\n            handleEdit = {handleEdit}\r\n          /> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}